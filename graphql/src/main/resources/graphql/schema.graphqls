scalar DateTime
scalar UUID
scalar JSON

type Query {
	apiKeys(page: Int, size: Int, sort: String): ApiKeyPageResponse
	apiKey(id: UUID!): ApiKey
	self: User!
	user(id: UUID!): User
	connections(user: UUID): [Connection]
	achievements(category: UUID): [Achievement]
	achievement(id: UUID!): Achievement
	achievementCategories: [AchievementCategory]
	achievementCategory(id: UUID!): AchievementCategory
	achievementUser(userId: UUID!): [AchievementUser]
	followers(userId: UUID!, page: Int, size: Int, sort: String): FollowPageResponse
	followersStatistics(userId: UUID!): FollowStatistics
}

type ApiKeyPageResponse {
	content: [ApiKey]
	pageNumber: Int
	pageSize: Int
	totalElements: Int
	totalPages: Int
	first: Boolean
	last: Boolean
}

type ApiKey {
    id: UUID!
    userId: UUID!
    user: User!
    name: String!
    description: String!
    plain: String
    truncated: String!
    createdAt: String!
    updatedAt: String!
    scopes: [String]
}

type Connection {
    userId: UUID!
    user: User!
    type: String!
    handle: String!
    username: String!
    profileUrl: String
    public: Boolean!
    createdAt: String!
    updatedAt: String!
}

type Achievement {
    id: UUID!
    name: String!
    description: String!
    iconUrl: String!
    percentage: Boolean!
    max: Int!
    hidden: Boolean!
    categoryId: UUID!
    category: AchievementCategory!
}

type AchievementCategory {
    id: UUID!
    name: String!
    description: String!
    iconUrl: String!
    color: String!
}

type AchievementUser {
    userId: UUID!
    user: User!
    achievementId: UUID!
    achievement: Achievement!
    progress: Int!
    unlocked: Boolean!
    unlockedAt: String
}

type User {
    id: UUID!
    username: String!
    firstName: String
    lastName: String
    email: String
    createdAt: String!
    updatedAt: String!
}

type FollowPageResponse {
	content: [Follow]
	pageNumber: Int
	pageSize: Int
	totalElements: Int
	totalPages: Int
	first: Boolean
	last: Boolean
}

type Follow {
    userId: UUID!
    user: User!
    peerId: UUID!
    peer: User!
    createdAt: String
}

type FollowStatistics {
	followers: Int!
	following: Int!
	followed: Boolean
}